{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>@shellygo/cypress-test-utils / Modules</p>"},{"location":"index.html#cypress-test-utils","title":"cypress-test-utils","text":"<p>Cypress helpers to control your UI components that work in all test levels. From component tests, through integration tests to e2e tests, for all frameworks: angular, lit, react. Making TDD fun in the modular UI area.</p> <p>CypressHelper makes it saner to write UI testing. It enables creating component drivers that will work on all testing levels (component, integration, e2e).</p>"},{"location":"index.html#installation","title":"Installation","text":"<p>This library provides an API to interact with UI elements - <code>CypressHelper</code> that combines the common features. To add it to your repo use</p> <p><code>npm i -D @shellygo/cypress-test-utils cypress</code></p> <p>or</p> <p><code>yarn add -D @shellygo/cypress-test-utils cypress</code></p>"},{"location":"index.html#concept","title":"Concept","text":"<p>Cypress Helpers can help you develop tests faster CypressHelper is designed to be used in any test level, and holds common methods used in Cypress tests </p> <p>CypressComponent helpers are designed to be used in component tests and are NOT framework agnostic, their sole purpose is to mount components into the browser.</p>"},{"location":"index.html#component-drivers","title":"Component Drivers","text":"<p>Testing UI is hard. There are many reasons for that, but a big one relies in the fact that unlike functions or services, where the API is clearly defined, when dealing with graphical user interfaces, it's up for the developer to transform it into an \"API\" for testing purposes. Back in the days, PageObjects helped mitigate this fact, but once the world moved to modular components, our test code quality degraded and became bloated with repetition and lack of abstraction. Component drivers are just like page objects, but for your components. Just like page objects, this is merely a pattern, and is not coupled to a specific implementation. However, using CypressHelper as the basis for your component drivers will help you leverage years of trial and error and be able to fully re-use your drivers across testing levels. This allows you to confidently write tests that use your actual implementation and keep focusing on the \"what\" and not the \"how\"</p> <p></p> <p>Component Drivers can be used as building blocks for integration and E2E test driver, using Driver Composition </p>"},{"location":"index.html#philosophy","title":"Philosophy","text":"<p>CypressHelper aims to provide a framework agnostic (angular, lit, react) API for what a manual tester can do. This means that the API will not focus on implementation, but on the actual action a user would take. For example, a user doesn't mouseUp, he/she hovers.</p>"},{"location":"index.html#documentation","title":"Documentation","text":""},{"location":"index.html#examples","title":"Examples","text":"<p>In the examples repo you can find 3 small apps; an angular app, a lit app and a react app. Each app contains a driver that uses helpers, component tests, integration tests and e2e tests. As you can see, all test levels use the same driver, meaning that if the feature's implementation changes, you'll need to change the driver alone, not the tests.</p>"},{"location":"index.html#framework-spesific-information","title":"Framework Spesific Information","text":""},{"location":"index.html#using-shadow-dom","title":"Using Shadow DOM","text":"<p>When using  elements with shadow dom, some things may not be where you expect them, fo example the text of this button is not directly inside the slot containing it.  CypressHelper will look for the assignedNode to retrieve the text, given that the selector of the slot has a '-slot' suffix. You may change this behaviour by overriding the default values when creating CypressHelper."},{"location":"index.html#angular","title":"Angular","text":"<p>When mounting an angular component, autoSpyOutputs is set to true, meaning all event emitters are automatically spied on and may be accessed during a test using <code>helper.get.spy(\"&lt;EventEmitterName&gt;\")</code></p>"},{"location":"index.html#developing","title":"Developing","text":"<ol> <li>Set up the repo - <code>yarn</code></li> <li>Build the project - <code>npm run build</code></li> <li>Running tests - <code>npm run cy:run</code></li> </ol>"},{"location":"modules.html","title":"Modules","text":"<p>@shellygo/cypress-test-utils - v4.1.9 / Modules</p>"},{"location":"modules.html#shellygocypress-test-utils-v419","title":"@shellygo/cypress-test-utils - v4.1.9","text":""},{"location":"modules.html#table-of-contents","title":"Table of contents","text":""},{"location":"modules.html#classes","title":"Classes","text":"<ul> <li>Assertable</li> <li>CypressAngularComponentHelper</li> <li>CypressHelper</li> <li>CypressHelperOptions</li> <li>CypressLitComponentHelper</li> <li>CypressReactComponentHelper</li> </ul>"},{"location":"modules.html#type-aliases","title":"Type Aliases","text":"<ul> <li>A11yOptions</li> <li>SnapshotOptions</li> <li>StubbedInstance</li> </ul>"},{"location":"modules.html#functions","title":"Functions","text":"<ul> <li>match</li> <li>then</li> </ul>"},{"location":"modules.html#type-aliases_1","title":"Type Aliases","text":""},{"location":"modules.html#a11yoptions","title":"A11yOptions","text":"<p>\u01ac A11yOptions: { <code>skipFailures?</code>: <code>boolean</code> ; <code>violationCallback?</code>: (<code>violations</code>: <code>axe.Result</code>[]) =&gt; <code>void</code>  } &amp; <code>AxeOptions</code></p>"},{"location":"modules.html#snapshotoptions","title":"SnapshotOptions","text":"<p>\u01ac SnapshotOptions: { <code>dataTestID?</code>: <code>string</code> ; <code>index?</code>: <code>number</code>  } &amp; <code>CypressImageSnapshotOptions</code></p>"},{"location":"modules.html#stubbedinstance","title":"StubbedInstance","text":"<p>\u01ac StubbedInstance&lt;<code>T</code>&gt;: <code>GenericStubbedInstance</code>&lt;<code>T</code>, <code>SinonStub</code>&gt;</p>"},{"location":"modules.html#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"modules.html#functions_1","title":"Functions","text":""},{"location":"modules.html#match","title":"match","text":"<p>\u25b8 match(<code>value</code>): <code>SinonMatcher</code></p> <p>Sinon matcher for stubs/spy comparison</p>"},{"location":"modules.html#parameters","title":"Parameters","text":"Name Type <code>value</code> <code>number</code>"},{"location":"modules.html#returns","title":"Returns","text":"<p><code>SinonMatcher</code></p> <p><code>Example</code></p> <p><pre><code>  // partial match of spy function params called with\n  let { given, when, get } = new CypressHelper();\n  it(\"should partially match spy params\", () =&gt; {\n      const obj = {\n        func: (param: Object) =&gt; {}\n      };\n      given.spyOnObject(obj, \"func\");\n      obj.func({ shelly: \"go\", inner: { attr: \"value\" } });\n      then(get.spyFromFunction(obj.func)).shouldHaveBeenCalledWithMatch(\n        match({ inner: { attr: \"value\" } })\n      );\n    });\n</code></pre> For more information see Sinon.match documentation</p> <p>\u25b8 match(<code>value</code>): <code>SinonMatcher</code></p> <p>Sinon matcher for stubs/spy comparison</p>"},{"location":"modules.html#parameters_1","title":"Parameters","text":"Name Type <code>value</code> <code>string</code>"},{"location":"modules.html#returns_1","title":"Returns","text":"<p><code>SinonMatcher</code></p> <p><code>Example</code></p> <p><pre><code>  // partial match of spy function params called with\n  let { given, when, get } = new CypressHelper();\n  it(\"should partially match spy params\", () =&gt; {\n      const obj = {\n        func: (param: Object) =&gt; {}\n      };\n      given.spyOnObject(obj, \"func\");\n      obj.func({ shelly: \"go\", inner: { attr: \"value\" } });\n      then(get.spyFromFunction(obj.func)).shouldHaveBeenCalledWithMatch(\n        match({ inner: { attr: \"value\" } })\n      );\n    });\n</code></pre> For more information see Sinon.match documentation</p> <p>\u25b8 match(<code>expr</code>): <code>SinonMatcher</code></p> <p>Sinon matcher for stubs/spy comparison</p>"},{"location":"modules.html#parameters_2","title":"Parameters","text":"Name Type <code>expr</code> <code>RegExp</code>"},{"location":"modules.html#returns_2","title":"Returns","text":"<p><code>SinonMatcher</code></p> <p><code>Example</code></p> <p><pre><code>  // partial match of spy function params called with\n  let { given, when, get } = new CypressHelper();\n  it(\"should partially match spy params\", () =&gt; {\n      const obj = {\n        func: (param: Object) =&gt; {}\n      };\n      given.spyOnObject(obj, \"func\");\n      obj.func({ shelly: \"go\", inner: { attr: \"value\" } });\n      then(get.spyFromFunction(obj.func)).shouldHaveBeenCalledWithMatch(\n        match({ inner: { attr: \"value\" } })\n      );\n    });\n</code></pre> For more information see Sinon.match documentation</p> <p>\u25b8 match(<code>callback</code>, <code>message?</code>): <code>SinonMatcher</code></p> <p>Sinon matcher for stubs/spy comparison</p>"},{"location":"modules.html#parameters_3","title":"Parameters","text":"Name Type <code>callback</code> (<code>value</code>: <code>any</code>) =&gt; <code>boolean</code> <code>message?</code> <code>string</code>"},{"location":"modules.html#returns_3","title":"Returns","text":"<p><code>SinonMatcher</code></p> <p><code>Example</code></p> <p><pre><code>  // partial match of spy function params called with\n  let { given, when, get } = new CypressHelper();\n  it(\"should partially match spy params\", () =&gt; {\n      const obj = {\n        func: (param: Object) =&gt; {}\n      };\n      given.spyOnObject(obj, \"func\");\n      obj.func({ shelly: \"go\", inner: { attr: \"value\" } });\n      then(get.spyFromFunction(obj.func)).shouldHaveBeenCalledWithMatch(\n        match({ inner: { attr: \"value\" } })\n      );\n    });\n</code></pre> For more information see Sinon.match documentation</p> <p>\u25b8 match(<code>obj</code>): <code>SinonMatcher</code></p> <p>Sinon matcher for stubs/spy comparison</p>"},{"location":"modules.html#parameters_4","title":"Parameters","text":"Name Type <code>obj</code> <code>object</code>"},{"location":"modules.html#returns_4","title":"Returns","text":"<p><code>SinonMatcher</code></p> <p><code>Example</code></p> <p><pre><code>  // partial match of spy function params called with\n  let { given, when, get } = new CypressHelper();\n  it(\"should partially match spy params\", () =&gt; {\n      const obj = {\n        func: (param: Object) =&gt; {}\n      };\n      given.spyOnObject(obj, \"func\");\n      obj.func({ shelly: \"go\", inner: { attr: \"value\" } });\n      then(get.spyFromFunction(obj.func)).shouldHaveBeenCalledWithMatch(\n        match({ inner: { attr: \"value\" } })\n      );\n    });\n</code></pre> For more information see Sinon.match documentation</p>"},{"location":"modules.html#then","title":"then","text":"<p>\u25b8 then(<code>subject</code>): <code>Assertable</code>&lt;<code>unknown</code>&gt;</p> <p>Wraps Cypress.Chainable and returns Assertable, decoupling test code form cypress 'should' assertions. This way you can add assertions of your own, by extending Assertable class.</p>"},{"location":"modules.html#parameters_5","title":"Parameters","text":"Name Type <code>subject</code> <code>any</code>"},{"location":"modules.html#returns_5","title":"Returns","text":"<p><code>Assertable</code>&lt;<code>unknown</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.elementByTestId(\"selector\")).shouldHaveLength(3)\n</code></pre> <p><code>Example</code></p> <pre><code>import { Assertable, then } from \"@shellygo/cypress-test-utils/assertable\";\n\nclass MyAssertable&lt;T&gt; extends Assertable&lt;T&gt; {\n  private styleFromWindow = (win: Window) =&gt; {\n    const styleItem = win.localStorage.getItem(`style`);\n    const obj = JSON.parse(styleItem || \"\");\n    return obj;\n  };\n  public shouldEqualToStoredStyle = () =&gt;\n    then(\n      new CypressHelper().get.window().then((win) =&gt; {\n         const style = styleFromWindow(win);\n         then(this.chainable).shouldDeepNestedInclude(style);\n      })\n    );\n}\n\nclass Driver {\n public given = {\n   // methods for setting test pre-conditions\n };\n public when = {\n   // methods for test \"actions\", such as click, darg &amp; drop, etc.\n };\n public get = {\n   // getter, for exploring the outcome, such as getting a text color a span\n };\n public then = (chainable: Cypress.Chainable&lt;any&gt;) =&gt; new MyAssertable(chainable);\n}\n</code></pre>"},{"location":"classes/Assertable.html","title":"Assertable","text":"<p>@shellygo/cypress-test-utils - v4.1.9 / Modules / Assertable</p>"},{"location":"classes/Assertable.html#class-assertablet","title":"Class: Assertable&lt;T&gt;","text":"<p>Assertable wraps Cypress.Chainable so that your tests are as decoupled as possible from Cypress. By using the Assertable class, you can use the same assertions in your tests, regardless of the testing framework you use. All you need to do if you wish to replace Cypress with another testing framework and keep your tests, is to replace the implementation of the Assertable class. You can also add assertions of your own, by extending Assertable class.</p> <p><code>Example</code></p> <pre><code>import { Assertable, CypressHelper, then } from \"@shellygo/cypress-test-utils\";\n\nclass MyAssertable&lt;T&gt; extends Assertable&lt;T&gt; {\n  private styleFromWindow = (win: Window) =&gt; {\n    const styleItem = win.localStorage.getItem(`style`);\n    return JSON.parse(styleItem || \"\");\n  };\n\n  public shouldEqualToStoredStyle = () =&gt;\n    then(\n      new CypressHelper().get.window().then((win) =&gt; {\n         const style = styleFromWindow(win);\n         then(this.chainable).shouldDeepNestedInclude(style);\n      })\n    );\n}\n\nclass Driver {\n public given = {\n   // your code here\n };\n public when = {\n   // your code here\n };\n public get = {\n   // your code here\n };\n public then = (chainable: Cypress.Chainable&lt;any&gt;) =&gt; new MyAssertable(chainable);\n}\n</code></pre>"},{"location":"classes/Assertable.html#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"classes/Assertable.html#table-of-contents","title":"Table of contents","text":""},{"location":"classes/Assertable.html#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"classes/Assertable.html#properties","title":"Properties","text":"<ul> <li>chainable</li> </ul>"},{"location":"classes/Assertable.html#methods","title":"Methods","text":"<ul> <li>should</li> <li>shouldBeAccessible</li> <li>shouldBeChecked</li> <li>shouldBeDisabled</li> <li>shouldBeEnabled</li> <li>shouldBeFocused</li> <li>shouldBeGreaterThan</li> <li>shouldBeGreaterThanOrEqual</li> <li>shouldBeLessThan</li> <li>shouldBeLessThanOrEqual</li> <li>shouldBeSelected</li> <li>shouldBeVisible</li> <li>shouldContainText</li> <li>shouldDeepEqual</li> <li>shouldDeepNestedInclude</li> <li>shouldEndWith</li> <li>shouldEqual</li> <li>shouldExist</li> <li>shouldHaveAttribute</li> <li>shouldHaveBeenCalled</li> <li>shouldHaveBeenCalledOnce</li> <li>shouldHaveBeenCalledThrice</li> <li>shouldHaveBeenCalledTimes</li> <li>shouldHaveBeenCalledTwice</li> <li>shouldHaveBeenCalledWith</li> <li>shouldHaveBeenCalledWithMatch</li> <li>shouldHaveClass</li> <li>shouldHaveCss</li> <li>shouldHaveLength</li> <li>shouldHaveProp</li> <li>shouldHaveText</li> <li>shouldHaveValue</li> <li>shouldInclude</li> <li>shouldNotBeChecked</li> <li>shouldNotBeFocused</li> <li>shouldNotBeSelected</li> <li>shouldNotBeVisible</li> <li>shouldNotContain</li> <li>shouldNotExist</li> <li>shouldNotHaveAttribute</li> <li>shouldNotHaveBeenCalled</li> <li>shouldNotHaveBeenCalledTimes</li> <li>shouldNotHaveText</li> <li>shouldNotInclude</li> <li>shouldNotThrow</li> <li>shouldStartWith</li> <li>shouldThrow</li> </ul>"},{"location":"classes/Assertable.html#constructors_1","title":"Constructors","text":""},{"location":"classes/Assertable.html#constructor","title":"constructor","text":"<p>\u2022 new Assertable&lt;<code>T</code>&gt;(<code>chainable</code>)</p>"},{"location":"classes/Assertable.html#type-parameters_1","title":"Type parameters","text":"Name <code>T</code>"},{"location":"classes/Assertable.html#parameters","title":"Parameters","text":"Name Type Description <code>chainable</code> <code>Chainable</code>&lt;<code>T</code>&gt; private"},{"location":"classes/Assertable.html#properties_1","title":"Properties","text":""},{"location":"classes/Assertable.html#chainable","title":"chainable","text":"<p>\u2022 <code>Protected</code> <code>Readonly</code> chainable: <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>private</p>"},{"location":"classes/Assertable.html#methods_1","title":"Methods","text":""},{"location":"classes/Assertable.html#should","title":"should","text":"<p>\u25b8 should(<code>chainer</code>, <code>...rest</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p>"},{"location":"classes/Assertable.html#parameters_1","title":"Parameters","text":"Name Type <code>chainer</code> <code>string</code> <code>...rest</code> <code>any</code>[]"},{"location":"classes/Assertable.html#returns","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p>"},{"location":"classes/Assertable.html#shouldbeaccessible","title":"shouldBeAccessible","text":"<p>\u25b8 shouldBeAccessible(<code>options?</code>): <code>void</code></p> <p>Assert that there are no A11y violations. This will run axe against the document at the point in which it is called. This means you can call this after interacting with your page and uncover accessibility issues introduced as a result of rendering in response to user actions</p>"},{"location":"classes/Assertable.html#parameters_2","title":"Parameters","text":"Name Type Description <code>options</code> <code>A11yOptions</code> Set of options passed into rules or checks, temporarily modifying them. This enabled you to see violations while allowing your tests to pass. This should be used as a temporary measure while you address accessibility violations"},{"location":"classes/Assertable.html#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>then(get.element(\"html\")).shouldBeAccessible()\n</code></pre> <p><code>Example</code></p> <pre><code>then(get.elementByTestId(\"selector\")).shouldBeAccessible({\n includedImpacts: [\"critical\", \"minor\"],\n rules: {\n   \"landmark-one-main\": { enabled: false }\n }\n})\n</code></pre>"},{"location":"classes/Assertable.html#shouldbechecked","title":"shouldBeChecked","text":"<p>\u25b8 shouldBeChecked(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that at least one element of the selection is checked, using .is(':checked').</p>"},{"location":"classes/Assertable.html#returns_2","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>   then(get.elementByTestId(\"checkbox-selector\")).shouldBeChecked()\n</code></pre>"},{"location":"classes/Assertable.html#shouldbedisabled","title":"shouldBeDisabled","text":"<p>\u25b8 shouldBeDisabled(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that at least one element of the selection is disabled, using <code>.is(':disabled')</code>.</p>"},{"location":"classes/Assertable.html#returns_3","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>   then(get.elementByTestId(\"selector\")).shouldBeDisabled()\n</code></pre>"},{"location":"classes/Assertable.html#shouldbeenabled","title":"shouldBeEnabled","text":"<p>\u25b8 shouldBeEnabled(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that at least one element of the selection is enabled, using <code>.is(':enabled')</code>.</p>"},{"location":"classes/Assertable.html#returns_4","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>   then(get.elementByTestId(\"selector\")).shouldBeEnabled()\n</code></pre>"},{"location":"classes/Assertable.html#shouldbefocused","title":"shouldBeFocused","text":"<p>\u25b8 shouldBeFocused(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that at least one element of the selection is focused.</p>"},{"location":"classes/Assertable.html#returns_5","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.elementByTestId(\"selector\")).shouldBeFocused()\n</code></pre>"},{"location":"classes/Assertable.html#shouldbegreaterthan","title":"shouldBeGreaterThan","text":"<p>\u25b8 shouldBeGreaterThan(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts that the target is a number or a date greater than the given number or date n respectively. However, it's often best to assert that the target is equal to its expected value.</p>"},{"location":"classes/Assertable.html#parameters_3","title":"Parameters","text":"Name Type <code>value</code> <code>number</code>"},{"location":"classes/Assertable.html#returns_6","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>   then(get.numberOfElements(\"radio\")).shouldBeGreaterThan(5);\n</code></pre>"},{"location":"classes/Assertable.html#shouldbegreaterthanorequal","title":"shouldBeGreaterThanOrEqual","text":"<p>\u25b8 shouldBeGreaterThanOrEqual(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts that the target is a number or a date greater than or equal to the given number or date n respectively. However, it's often best to assert that the target is equal to its expected value.</p>"},{"location":"classes/Assertable.html#parameters_4","title":"Parameters","text":"Name Type <code>value</code> <code>number</code>"},{"location":"classes/Assertable.html#returns_7","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>  then(get.numberOfElements(\"radio\")).shouldBeGreaterThanOrEqual(5);\n</code></pre>"},{"location":"classes/Assertable.html#shouldbelessthan","title":"shouldBeLessThan","text":"<p>\u25b8 shouldBeLessThan(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts that the target is a number or a n date less than or equal to the given number or date n respectively. However, it's often best to assert that the target is equal to its expected value.</p>"},{"location":"classes/Assertable.html#parameters_5","title":"Parameters","text":"Name Type <code>value</code> <code>number</code>"},{"location":"classes/Assertable.html#returns_8","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>   then(get.numberOfElements(\"radio\")).shouldBeLessThen(5);\n</code></pre>"},{"location":"classes/Assertable.html#shouldbelessthanorequal","title":"shouldBeLessThanOrEqual","text":"<p>\u25b8 shouldBeLessThanOrEqual(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts that the target is a number or a date less than or equal to the given number or date n respectively. However, it's often best to assert that the target is equal to its expected value.</p>"},{"location":"classes/Assertable.html#parameters_6","title":"Parameters","text":"Name Type <code>value</code> <code>number</code>"},{"location":"classes/Assertable.html#returns_9","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.numberOfElements('list-item')).shouldBeLessThanOrEqual(5)\n</code></pre>"},{"location":"classes/Assertable.html#shouldbeselected","title":"shouldBeSelected","text":"<p>\u25b8 shouldBeSelected(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that at least one element of the selection is selected, using .is(':selected').</p>"},{"location":"classes/Assertable.html#returns_10","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.elementByTestId(\"selector\")).shouldBeSelected()\n</code></pre>"},{"location":"classes/Assertable.html#shouldbevisible","title":"shouldBeVisible","text":"<p>\u25b8 shouldBeVisible(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that at least one element of the selection is visible, using .is(':visible').</p>"},{"location":"classes/Assertable.html#returns_11","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.elementByTestId(\"selector\")).shouldBeVisible()\n</code></pre>"},{"location":"classes/Assertable.html#shouldcontaintext","title":"shouldContainText","text":"<p>\u25b8 shouldContainText(<code>text</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that the text of the first element of the selection partially contains the given text, using .text().</p>"},{"location":"classes/Assertable.html#parameters_7","title":"Parameters","text":"Name Type <code>text</code> <code>string</code>"},{"location":"classes/Assertable.html#returns_12","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.elementByTestId(\"selector\")).shouldContainText(\"test\")\n</code></pre>"},{"location":"classes/Assertable.html#shoulddeepequal","title":"shouldDeepEqual","text":"<p>\u25b8 shouldDeepEqual(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Causes all <code>.equal</code>, <code>.include</code>, <code>.members</code>, <code>.keys</code>, and <code>.property</code> assertions that follow in the chain to use deep equality instead of strict (<code>===</code>) equality. See the <code>deep-eql</code> project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.</p>"},{"location":"classes/Assertable.html#parameters_8","title":"Parameters","text":"Name Type <code>value</code> <code>any</code>"},{"location":"classes/Assertable.html#returns_13","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(\n  get.fixture(\"user\")).shouldDeepEqual({\n    name: \"Jane Doe\",\n    id: \"1234\"\n})\n</code></pre>"},{"location":"classes/Assertable.html#shoulddeepnestedinclude","title":"shouldDeepNestedInclude","text":"<p>\u25b8 shouldDeepNestedInclude(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts that the target has a property with the given key <code>name</code>.</p>"},{"location":"classes/Assertable.html#parameters_9","title":"Parameters","text":"Name Type <code>value</code> <code>any</code>"},{"location":"classes/Assertable.html#returns_14","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(\n  get.fixture(\"user\")).shouldDeepNestedInclude({\n    name: \"Jane Doe\",\n    id: \"1234\",\n    nested: {\n      attr1: \"something\",\n      attr2: \"the other thing\"\n  }\n})\n</code></pre>"},{"location":"classes/Assertable.html#shouldendwith","title":"shouldEndWith","text":"<p>\u25b8 shouldEndWith(<code>value</code>): <code>Chainable</code>&lt;<code>string</code>&gt;</p> <p>Asserts that text ends with value</p>"},{"location":"classes/Assertable.html#parameters_10","title":"Parameters","text":"Name Type <code>value</code> <code>string</code>"},{"location":"classes/Assertable.html#returns_15","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>string</code>&gt;</p> <p><code>Example</code></p> <pre><code>  then(helper.get.elementsText('selector)).shouldEndWith('test')\n</code></pre>"},{"location":"classes/Assertable.html#shouldequal","title":"shouldEqual","text":"<p>\u25b8 shouldEqual(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts that the target is strictly (<code>===</code>) equal to the given <code>val</code>.</p>"},{"location":"classes/Assertable.html#parameters_11","title":"Parameters","text":"Name Type <code>value</code> <code>any</code>"},{"location":"classes/Assertable.html#returns_16","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>   then(get.inputValue(\"name-input\")).shouldEqual(\"John\")\n</code></pre>"},{"location":"classes/Assertable.html#shouldexist","title":"shouldExist","text":"<p>\u25b8 shouldExist(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that the selection is not empty. Note that this overrides the built-in chai assertion. If the object asserted against is not a jQuery object, the original implementation will be called.</p>"},{"location":"classes/Assertable.html#returns_17","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>  then(get.elementByTestId(\"selector\")).shouldExist()\n</code></pre>"},{"location":"classes/Assertable.html#shouldhaveattribute","title":"shouldHaveAttribute","text":"<p>\u25b8 shouldHaveAttribute(<code>attribute</code>, <code>expectedValue</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that the first element of the selection has the given attribute, using <code>.attr()</code>. Optionally, assert a particular value as well. The return value is available for chaining.</p>"},{"location":"classes/Assertable.html#parameters_12","title":"Parameters","text":"Name Type <code>attribute</code> <code>string</code> <code>expectedValue</code> <code>string</code>"},{"location":"classes/Assertable.html#returns_18","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code> then(get.elementByTestId(\"selector\")).shouldHaveAttribute(\"test\")\n</code></pre>"},{"location":"classes/Assertable.html#shouldhavebeencalled","title":"shouldHaveBeenCalled","text":"<p>\u25b8 shouldHaveBeenCalled(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts spy was called ate least once</p>"},{"location":"classes/Assertable.html#returns_19","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.spy(\"onSomething\")).shouldHaveBeenCalled()\n</code></pre>"},{"location":"classes/Assertable.html#shouldhavebeencalledonce","title":"shouldHaveBeenCalledOnce","text":"<p>\u25b8 shouldHaveBeenCalledOnce(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts spy was called exactly once</p>"},{"location":"classes/Assertable.html#returns_20","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.spy(\"onSomething\")).shouldHaveBeenCalledOnce()\n</code></pre>"},{"location":"classes/Assertable.html#shouldhavebeencalledthrice","title":"shouldHaveBeenCalledThrice","text":"<p>\u25b8 shouldHaveBeenCalledThrice(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts spy was called exactly thrice</p>"},{"location":"classes/Assertable.html#returns_21","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.spy(\"onSomething\")).shouldHaveBeenCalledThrice()\n</code></pre>"},{"location":"classes/Assertable.html#shouldhavebeencalledtimes","title":"shouldHaveBeenCalledTimes","text":"<p>\u25b8 shouldHaveBeenCalledTimes(<code>n</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts spy was called exactly n times</p>"},{"location":"classes/Assertable.html#parameters_13","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> number of times spy should have been called"},{"location":"classes/Assertable.html#returns_22","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.spy(\"onSomething\")).shouldHaveBeenCalledTimes(5)\n</code></pre>"},{"location":"classes/Assertable.html#shouldhavebeencalledtwice","title":"shouldHaveBeenCalledTwice","text":"<p>\u25b8 shouldHaveBeenCalledTwice(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts spy was called exactly twice</p>"},{"location":"classes/Assertable.html#returns_23","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.spy(\"onSomething\")).shouldHaveBeenCalledTwice()\n</code></pre>"},{"location":"classes/Assertable.html#shouldhavebeencalledwith","title":"shouldHaveBeenCalledWith","text":"<p>\u25b8 shouldHaveBeenCalledWith(<code>...args</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert spy was called at least once with the provided arguments.</p>"},{"location":"classes/Assertable.html#parameters_14","title":"Parameters","text":"Name Type <code>...args</code> <code>any</code>[]"},{"location":"classes/Assertable.html#returns_24","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.spy(\"onSomething\")).shouldHaveBeenCalledWith({ id: 1 })\n</code></pre>"},{"location":"classes/Assertable.html#shouldhavebeencalledwithmatch","title":"shouldHaveBeenCalledWithMatch","text":"<p>\u25b8 shouldHaveBeenCalledWithMatch(<code>...args</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert spy was called with matching arguments (and possibly others).</p>"},{"location":"classes/Assertable.html#parameters_15","title":"Parameters","text":"Name Type <code>...args</code> <code>any</code>[]"},{"location":"classes/Assertable.html#returns_25","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.spy(\"onSomething\")).shouldHaveBeenCalledWithMatch(match({ id: 1 }))\n</code></pre> <p><code>Example</code></p> <pre><code> it('should call the get method of the HTTP client with a URL with query param filter = status', () =&gt; {\n  healthService.fetchHealthResults(status);\n  then(get.mock.httpClientService().get).shouldHaveBeenCalledWith(\n    match(baseURL),\n    match.hasNested(\n      'params.updates[0]',\n      match({ param: 'filter', value: `status eq ${status}` })\n    )\n  );\n});\n</code></pre>"},{"location":"classes/Assertable.html#shouldhaveclass","title":"shouldHaveClass","text":"<p>\u25b8 shouldHaveClass(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that the selection has the given CSS class.</p>"},{"location":"classes/Assertable.html#parameters_16","title":"Parameters","text":"Name Type <code>value</code> <code>string</code>"},{"location":"classes/Assertable.html#returns_26","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>  then(get.elementByTestId(\"selector\")).shouldHaveClass(\"test\")\n</code></pre>"},{"location":"classes/Assertable.html#shouldhavecss","title":"shouldHaveCss","text":"<p>\u25b8 shouldHaveCss(<code>property</code>, <code>expectedValue</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that an element has a css property with the given value.</p>"},{"location":"classes/Assertable.html#parameters_17","title":"Parameters","text":"Name Type <code>property</code> <code>string</code> <code>expectedValue</code> <code>string</code>"},{"location":"classes/Assertable.html#returns_27","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.elementByTestId(\"selector\")).shouldHaveCss(\"color\", \"rgb(102, 102, 102)\"\")\n</code></pre>"},{"location":"classes/Assertable.html#shouldhavelength","title":"shouldHaveLength","text":"<p>\u25b8 shouldHaveLength(<code>length</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts that the target's length property is equal to the given number n..</p>"},{"location":"classes/Assertable.html#parameters_18","title":"Parameters","text":"Name Type <code>length</code> <code>number</code>"},{"location":"classes/Assertable.html#returns_28","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>   then(get.elementByTestId(\"selector\")).shouldHaveLength(3)\n</code></pre>"},{"location":"classes/Assertable.html#shouldhaveprop","title":"shouldHaveProp","text":"<p>\u25b8 shouldHaveProp(<code>property</code>, <code>expectedValue</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that the first element of the selection has the given attribute, using <code>.prop()</code>. Optionally, assert a particular value as well. The return value is available for chaining.</p>"},{"location":"classes/Assertable.html#parameters_19","title":"Parameters","text":"Name Type <code>property</code> <code>string</code> <code>expectedValue</code> <code>string</code> | <code>boolean</code>"},{"location":"classes/Assertable.html#returns_29","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.elementByTestId(\"selector\")).shouldHaveProperty(\"test\")\n</code></pre>"},{"location":"classes/Assertable.html#shouldhavetext","title":"shouldHaveText","text":"<p>\u25b8 shouldHaveText(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that the text of the first element of the selection is equal to the given text, using .text().</p>"},{"location":"classes/Assertable.html#parameters_20","title":"Parameters","text":"Name Type <code>value</code> <code>string</code>"},{"location":"classes/Assertable.html#returns_30","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code> then(get.elementByTestId(\"selector\")).shouldHaveText(\"test\")\n</code></pre>"},{"location":"classes/Assertable.html#shouldhavevalue","title":"shouldHaveValue","text":"<p>\u25b8 shouldHaveValue(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that the first element of the selection has the given value, using .val().</p>"},{"location":"classes/Assertable.html#parameters_21","title":"Parameters","text":"Name Type <code>value</code> <code>string</code>"},{"location":"classes/Assertable.html#returns_31","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.elementByTestId(\"selector\")).shouldHaveValue(\"test\")\n ```\n\n___\n\n### shouldInclude\n\n\u25b8 **shouldInclude**(`value`): `Chainable`&lt;`T`\\&gt;\n\nWhen the target is a string, `.include` asserts that the given string val is a substring of the target.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `value` | `any` |\n\n#### Returns\n\n`Chainable`&lt;`T`\\&gt;\n\n**`Example`**\n\n```ts\n   then(helper.get.elementsText('selector)).shouldContain('test')\n</code></pre>"},{"location":"classes/Assertable.html#shouldnotbechecked","title":"shouldNotBeChecked","text":"<p>\u25b8 shouldNotBeChecked(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that at least one element of the selection is not checked, using .is(':checked').</p>"},{"location":"classes/Assertable.html#returns_32","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>  then(get.elementByTestId(\"checkbox-selector\")).shouldNotBeChecked()\n</code></pre>"},{"location":"classes/Assertable.html#shouldnotbefocused","title":"shouldNotBeFocused","text":"<p>\u25b8 shouldNotBeFocused(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that no element of the selection is focused.</p>"},{"location":"classes/Assertable.html#returns_33","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.elementByTestId(\"selector\")).shouldNotBeFocused()\n</code></pre>"},{"location":"classes/Assertable.html#shouldnotbeselected","title":"shouldNotBeSelected","text":"<p>\u25b8 shouldNotBeSelected(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that at least one element of the selection is not selected, using .is(':selected').</p>"},{"location":"classes/Assertable.html#returns_34","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.elementByTestId(\"selector\")).shouldNotBeSelected()\n</code></pre>"},{"location":"classes/Assertable.html#shouldnotbevisible","title":"shouldNotBeVisible","text":"<p>\u25b8 shouldNotBeVisible(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that at least one element of the selection is not visible, using .is(':visible').</p>"},{"location":"classes/Assertable.html#returns_35","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.elementByTestId(\"selector\")).shouldNotBeVisible()\n</code></pre>"},{"location":"classes/Assertable.html#shouldnotcontain","title":"shouldNotContain","text":"<p>\u25b8 shouldNotContain(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>When the target is a string, shouldNotInclude asserts that the given string val is not a substring of the target.</p>"},{"location":"classes/Assertable.html#parameters_22","title":"Parameters","text":"Name Type <code>value</code> <code>any</code>"},{"location":"classes/Assertable.html#returns_36","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>   then(helper.get.elementsText('selector)).shouldNotInclude('test')\n</code></pre>"},{"location":"classes/Assertable.html#shouldnotexist","title":"shouldNotExist","text":"<p>\u25b8 shouldNotExist(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that the selection is empty. Note that this overrides the built-in chai assertion. If the object asserted against is not a jQuery object, the original implementation will be called.</p>"},{"location":"classes/Assertable.html#returns_37","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>   then(get.elementByTestId(\"selector\")).shouldNotExist()\n</code></pre>"},{"location":"classes/Assertable.html#shouldnothaveattribute","title":"shouldNotHaveAttribute","text":"<p>\u25b8 shouldNotHaveAttribute(<code>attribute</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Assert that the first element of the selection does not has the given attribute, using <code>.attr()</code>. Optionally, assert a particular value as well. The return value is available for chaining.</p>"},{"location":"classes/Assertable.html#parameters_23","title":"Parameters","text":"Name Type <code>attribute</code> <code>string</code>"},{"location":"classes/Assertable.html#returns_38","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code> then(get.elementByTestId(\"selector\")).shouldNotHaveAttribute(\"test\")\n</code></pre>"},{"location":"classes/Assertable.html#shouldnothavebeencalled","title":"shouldNotHaveBeenCalled","text":"<p>\u25b8 shouldNotHaveBeenCalled(): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts spy was not called</p>"},{"location":"classes/Assertable.html#returns_39","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.spy(\"onSomething\")).shouldNotHaveBeenCalled()\n</code></pre>"},{"location":"classes/Assertable.html#shouldnothavebeencalledtimes","title":"shouldNotHaveBeenCalledTimes","text":"<p>\u25b8 shouldNotHaveBeenCalledTimes(<code>n</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>Asserts spy was NOT called exactly n times</p>"},{"location":"classes/Assertable.html#parameters_24","title":"Parameters","text":"Name Type Description <code>n</code> <code>number</code> number of times spy should NOT have been called"},{"location":"classes/Assertable.html#returns_40","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(get.spy(\"onSomething\")).shouldNotHaveBeenCalledTimes(5)\n</code></pre>"},{"location":"classes/Assertable.html#shouldnothavetext","title":"shouldNotHaveText","text":"<p>\u25b8 shouldNotHaveText(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>shouldNotHaveText asserts that the given string val is not a substring of the target.</p>"},{"location":"classes/Assertable.html#parameters_25","title":"Parameters","text":"Name Type <code>value</code> <code>string</code>"},{"location":"classes/Assertable.html#returns_41","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>   then(helper.get.elementsText('selector)).shouldNotHaveText('test')\n</code></pre>"},{"location":"classes/Assertable.html#shouldnotinclude","title":"shouldNotInclude","text":"<p>\u25b8 shouldNotInclude(<code>value</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>When the target is a string, <code>not.include</code> asserts that the given string val is not a substring of the target.</p>"},{"location":"classes/Assertable.html#parameters_26","title":"Parameters","text":"Name Type <code>value</code> <code>any</code>"},{"location":"classes/Assertable.html#returns_42","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>   then(helper.get.elementsText('selector)).shouldNotContain('test')\n</code></pre>"},{"location":"classes/Assertable.html#shouldnotthrow","title":"shouldNotThrow","text":"<p>\u25b8 shouldNotThrow(<code>value?</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>When no arguments are provided, shouldThrow invokes the target function and asserts that no error is thrown. When one argument is provided, and it's a string, shouldThrow invokes the target function and asserts that no error is thrown with a message that contains that string.</p>"},{"location":"classes/Assertable.html#parameters_27","title":"Parameters","text":"Name Type <code>value?</code> <code>string</code> | <code>RegExp</code>"},{"location":"classes/Assertable.html#returns_43","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>function badFn() { console.log('Illegal salmon!') }\nthen(() =&gt; badFn()).shouldNotThrow()\nthen(() =&gt; badFn()).shouldNotThrow('salmon')\nthen(() =&gt; badFn()).shouldNotThrow(/salmon/)\n</code></pre>"},{"location":"classes/Assertable.html#shouldstartwith","title":"shouldStartWith","text":"<p>\u25b8 shouldStartWith(<code>value</code>): <code>Chainable</code>&lt;<code>string</code>&gt;</p> <p>Asserts that text starts with value</p>"},{"location":"classes/Assertable.html#parameters_28","title":"Parameters","text":"Name Type <code>value</code> <code>string</code>"},{"location":"classes/Assertable.html#returns_44","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>string</code>&gt;</p> <p><code>Example</code></p> <pre><code>  then(helper.get.elementsText('selector)).shouldStartWith('test')\n</code></pre>"},{"location":"classes/Assertable.html#shouldthrow","title":"shouldThrow","text":"<p>\u25b8 shouldThrow(<code>value?</code>): <code>Chainable</code>&lt;<code>T</code>&gt;</p> <p>When no arguments are provided, shouldThrow invokes the target function and asserts that an error is thrown. When one argument is provided, and it's a string, shouldThrow invokes the target function and asserts that an error is thrown with a message that contains that string.</p>"},{"location":"classes/Assertable.html#parameters_29","title":"Parameters","text":"Name Type <code>value?</code> <code>string</code> | <code>RegExp</code>"},{"location":"classes/Assertable.html#returns_45","title":"Returns","text":"<p><code>Chainable</code>&lt;<code>T</code>&gt;</p> <p><code>Example</code></p> <pre><code>function badFn() { throw new TypeError('Illegal salmon!') }\nthen(() =&gt; badFn()).shouldThrow()\nthen(() =&gt; badFn()).shouldThrow('salmon')\nthen(() =&gt; badFn()).shouldThrow(/salmon/)\n</code></pre>"},{"location":"classes/CypressAngularComponentHelper.html","title":"CypressAngularComponentHelper","text":"<p>@shellygo/cypress-test-utils - v4.1.9 / Modules / CypressAngularComponentHelper</p>"},{"location":"classes/CypressAngularComponentHelper.html#class-cypressangularcomponenthelpert","title":"Class: CypressAngularComponentHelper&lt;T&gt;","text":"<p><code>Classdes</code></p> <p>CypressAngularComponentHelper exposes the following public properties:</p>"},{"location":"classes/CypressAngularComponentHelper.html#type-parameters","title":"Type parameters","text":"Name Description <code>T</code> component type"},{"location":"classes/CypressAngularComponentHelper.html#table-of-contents","title":"Table of contents","text":""},{"location":"classes/CypressAngularComponentHelper.html#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"classes/CypressAngularComponentHelper.html#properties","title":"Properties","text":"<ul> <li>get</li> <li>when</li> </ul>"},{"location":"classes/CypressAngularComponentHelper.html#constructors_1","title":"Constructors","text":""},{"location":"classes/CypressAngularComponentHelper.html#constructor","title":"constructor","text":"<p>\u2022 new CypressAngularComponentHelper&lt;<code>T</code>&gt;()</p>"},{"location":"classes/CypressAngularComponentHelper.html#type-parameters_1","title":"Type parameters","text":"Name <code>T</code>"},{"location":"classes/CypressAngularComponentHelper.html#properties_1","title":"Properties","text":""},{"location":"classes/CypressAngularComponentHelper.html#get","title":"get","text":"<p>\u2022 get: <code>Object</code></p> <p>enables getting the mounted component</p>"},{"location":"classes/CypressAngularComponentHelper.html#type-declaration","title":"Type declaration","text":"Name Type <code>component</code> () =&gt; <code>T</code> <p>component: () =&gt; <code>T</code></p> <p>Get mounted component</p>"},{"location":"classes/CypressAngularComponentHelper.html#when","title":"when","text":"<p>\u2022 when: <code>Object</code></p> <p>enables mounting of an Angular component</p>"},{"location":"classes/CypressAngularComponentHelper.html#type-declaration_1","title":"Type declaration","text":"Name Type <code>mount</code> (<code>component</code>: <code>string</code> | <code>Type</code>&lt;<code>T</code>&gt;, <code>config</code>: <code>MountConfig</code>&lt;<code>T</code>&gt;, <code>props?</code>: <code>Partial</code>&lt;{ [P in string | number | symbol]: T[P] }&gt;) =&gt; <code>PromiseLike</code>&lt;<code>ComponentFixture</code>&lt;<code>T</code>&gt;&gt; <p>mount: (<code>component</code>: <code>string</code> | <code>Type</code>&lt;<code>T</code>&gt;, <code>config</code>: <code>MountConfig</code>&lt;<code>T</code>&gt;, <code>props?</code>: <code>Partial</code>&lt;{ [P in string | number | symbol]: T[P] }&gt;) =&gt; <code>PromiseLike</code>&lt;<code>ComponentFixture</code>&lt;<code>T</code>&gt;&gt;</p> <p>mount an angular component, with autoSpyOutputs set to true, meaning all event emitters are automatically spied on and be accessed during a test using <pre><code>helper.get.spy(\"&lt;EventEmitterName&gt;\")\n</code></pre></p> <p><code>Example</code></p> <pre><code>helper.when.mount(\n Type&lt;AvatarComponent&gt;,\n {\n   declarations: [AvatarComponent],\n },\n {\n   initials: 'JD',\n   picture: 'assets/avatar/def-user-male.png',\n }\n)\n</code></pre>"},{"location":"classes/CypressHelper.html","title":"CypressHelper","text":"<p>@shellygo/cypress-test-utils - v4.1.9 / Modules / CypressHelper</p>"},{"location":"classes/CypressHelper.html#class-cypresshelper","title":"Class: CypressHelper","text":"<p><code>Classdes</code></p> <p>CypressHelper exposes the following public properties:</p>"},{"location":"classes/CypressHelper.html#table-of-contents","title":"Table of contents","text":""},{"location":"classes/CypressHelper.html#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"classes/CypressHelper.html#properties","title":"Properties","text":"<ul> <li>get</li> <li>given</li> <li>when</li> </ul>"},{"location":"classes/CypressHelper.html#methods","title":"Methods","text":"<ul> <li>beforeAndAfter</li> </ul>"},{"location":"classes/CypressHelper.html#constructors_1","title":"Constructors","text":""},{"location":"classes/CypressHelper.html#constructor","title":"constructor","text":"<p>\u2022 new CypressHelper(<code>options?</code>)</p>"},{"location":"classes/CypressHelper.html#parameters","title":"Parameters","text":"Name Type <code>options?</code> <code>CypressHelperOptions</code>"},{"location":"classes/CypressHelper.html#properties_1","title":"Properties","text":""},{"location":"classes/CypressHelper.html#get","title":"get","text":"<p>\u2022 get: <code>Object</code></p> <p>The get property will hold methods which will give our tests access to the \u201coutput\u201d of the component in a \u201cblack box\u201d fashion</p>"},{"location":"classes/CypressHelper.html#type-declaration","title":"Type declaration","text":"Name Type <code>assertableStub</code> (<code>stub</code>: <code>any</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>any</code>&gt;&gt; <code>bySelector</code> (<code>selector</code>: <code>string</code>, <code>attribute?</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>currentLocation</code> () =&gt; <code>Chainable</code>&lt;<code>string</code>&gt; <code>element</code> (<code>selector</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>elementByAttribute</code> (<code>attribute</code>: <code>string</code>, <code>selector</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>elementBySelector</code> (<code>selector</code>: <code>string</code>, <code>attribute?</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>elementByTestId</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>elementByText</code> (<code>content</code>: <code>string</code> | <code>RegExp</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; | <code>Chainable</code>&lt;<code>undefined</code>&gt; <code>elementComputedStyleProperty</code> (<code>dataTestID</code>: <code>string</code>, <code>styleProperty</code>: keyof <code>CSSStyleDeclaration</code>, <code>__namedParameters?</code>: { <code>index?</code>: <code>number</code> ; <code>pseudoElement?</code>: <code>string</code>  }) =&gt; <code>Chainable</code>&lt;<code>null</code> | <code>string</code> | <code>number</code> | <code>CSSRule</code> | (<code>property</code>: <code>string</code>) =&gt; <code>string</code> | (<code>property</code>: <code>string</code>) =&gt; <code>string</code> | (<code>index</code>: <code>number</code>) =&gt; <code>string</code> | (<code>property</code>: <code>string</code>) =&gt; <code>string</code> | (<code>property</code>: <code>string</code>, <code>value</code>: <code>null</code> | <code>string</code>, <code>priority?</code>: <code>string</code>) =&gt; <code>void</code>&gt; <code>elementsAttribute</code> (<code>dataTestID</code>: <code>string</code>, <code>attributeName</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>undefined</code> | <code>string</code>&gt; <code>elementsComputedStyle</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>, <code>pseudoElement?</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>CSSStyleDeclaration</code>&gt; <code>elementsProperty</code> (<code>dataTestID</code>: <code>string</code>, <code>propertyName</code>: keyof <code>JQuery</code>&lt;<code>HTMLElement</code>&gt;, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>any</code>&gt; <code>elementsStyleAttribute</code> (<code>dataTestID</code>: <code>string</code>, <code>attributeName</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>PlainObject</code>&lt;<code>string</code>&gt;&gt; <code>elementsText</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>string</code>&gt; <code>env</code> (<code>key</code>: <code>string</code>) =&gt; <code>any</code> <code>fixture</code> (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>any</code>&gt; <code>focusedElement</code> () =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>imageSnapshot</code> (<code>name</code>: <code>string</code>, <code>__namedParameters?</code>: <code>SnapshotOptions</code>) =&gt; <code>Chainable</code>&lt;<code>DiffSnapshotResult</code>&gt; <code>inputValue</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>string</code> | <code>number</code> | <code>string</code>[]&gt; <code>nthBySelector</code> (<code>selector</code>: <code>string</code>, <code>index?</code>: <code>number</code>, <code>attribute?</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>numberOfElements</code> (<code>dataTestID</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>number</code>&gt; <code>numberOfRequests</code> (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>number</code>&gt; <code>requestBody</code> (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>any</code>&gt; <code>requestHeader</code> (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;{ <code>[key: string]</code>: <code>string</code> | <code>string</code>[];  }&gt; <code>requestQueryParams</code> (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;{ <code>[k: string]</code>: <code>string</code>;  }&gt; <code>requestUrl</code> (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>string</code>&gt; <code>responseBody</code> (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>any</code>&gt; <code>responseHeader</code> (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;{ <code>[key: string]</code>: <code>string</code> | <code>string</code>[];  }&gt; <code>spy</code> (<code>name</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>spyFromFunction</code> (<code>func</code>: <code>Function</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>stub</code> (<code>name</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>window</code> () =&gt; <code>Chainable</code>&lt;<code>AUTWindow</code>&gt; <p>assertableStub: (<code>stub</code>: <code>any</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>any</code>&gt;&gt;</p> <p>Get stub as Cypress.Chainable</p> <p><code>Example</code></p> <pre><code>const serviceMock : Service = helper.given.stubbedInstance(Service);\nhelper.get.assertableStub(serviceMock.function).should('have.been.called'));\n</code></pre> <p><code>Deprecated</code></p> <p>The method should not be used anymore, use <code>then</code> instead <pre><code>then(serviceMock.function).shouldHaveBeenCalled();\n</code></pre></p> <p>bySelector: (<code>selector</code>: <code>string</code>, <code>attribute?</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Get one or more DOM elements by selector.</p> <p><code>Example</code></p> <p>Get an element with shape=\"filter-grid\" <pre><code>&lt;clr-icon shape=\"filter-grid\"&gt;&lt;/clr-icon&gt;\nhelper.get.bySelector(\"filter-grid\", \"shape\")\n</code></pre></p> <p>currentLocation: () =&gt; <code>Chainable</code>&lt;<code>string</code>&gt;</p> <p>Get the current URL of the page that is currently active.</p> <p>element: (<code>selector</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Get one or more DOM elements by selector. The querying behavior of this command matches exactly how $(\u2026) works in jQuery. *** Note! Using this method may lead to flakey tests! You should use get.elementByTestId ***</p> <p><code>Example</code></p> <pre><code>get.element('.list&gt;li', 3)    // Yield the &lt;li&gt;'s in &lt;.list&gt;\nget.element('ul li:first')\nget.element('.dropdown-menu')\n</code></pre> <p>elementByAttribute: (<code>attribute</code>: <code>string</code>, <code>selector</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Get one or more DOM elements by attribute.</p> <p><code>Example</code></p> <p>Get an element with shape=\"filter-grid\" <pre><code>&lt;clr-icon shape=\"filter-grid\"&gt;&lt;/clr-icon&gt;\nhelper.get.byAttribute(\"shape\", \"filter-grid\")\n</code></pre></p> <p>elementBySelector: (<code>selector</code>: <code>string</code>, <code>attribute?</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Get one or more DOM elements by selector. Same as bySelector</p> <p><code>Example</code></p> <p>Get an element with shape=\"filter-grid\" <pre><code>&lt;clr-icon shape=\"filter-grid\"&gt;&lt;/clr-icon&gt;\nhelper.get.elementBySelector(\"filter-grid\", \"shape\")\n</code></pre></p> <p>elementByTestId: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Get A DOM element at a specific index from elements.</p> <p><code>Example</code></p> <pre><code>helper.when.dragAndDrop(\n  helper.get.elementByTestId('selected-item', 2),\n  helper.get.elementByTestId('available-items')\n</code></pre> <p>elementByText: (<code>content</code>: <code>string</code> | <code>RegExp</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; | <code>Chainable</code>&lt;<code>undefined</code>&gt;</p> <p>Get the DOM element containing the text. DOM elements can contain more than the desired text and still match. Additionally, Cypress prefers some DOM elements over the deepest element found. *** Note! Using this method may lead to flakey tests! You should use get.elementByTestId ***</p> <p><code>Example</code></p> <pre><code>then(helper.get.elementByText(\"Avamar\")).shouldExist();\n</code></pre> <p>elementComputedStyleProperty: (<code>dataTestID</code>: <code>string</code>, <code>styleProperty</code>: keyof <code>CSSStyleDeclaration</code>, <code>__namedParameters?</code>: { <code>index?</code>: <code>number</code> ; <code>pseudoElement?</code>: <code>string</code>  }) =&gt; <code>Chainable</code>&lt;<code>null</code> | <code>string</code> | <code>number</code> | <code>CSSRule</code> | (<code>property</code>: <code>string</code>) =&gt; <code>string</code> | (<code>property</code>: <code>string</code>) =&gt; <code>string</code> | (<code>index</code>: <code>number</code>) =&gt; <code>string</code> | (<code>property</code>: <code>string</code>) =&gt; <code>string</code> | (<code>property</code>: <code>string</code>, <code>value</code>: <code>null</code> | <code>string</code>, <code>priority?</code>: <code>string</code>) =&gt; <code>void</code>&gt;</p> <p>Returns a specific style of an element, including pseudo elements if specified.</p> <p><code>Example</code></p> <p><pre><code>helper.get.elementSpecificStyle('element-test-id', 'backgroundImage')\n</code></pre> * ```ts helper.get.elementSpecificStyle('element-test-id', 'backgroundImage', {index: 3, pseudoElement: ':before'}) <pre><code>-----\n\n**elementsAttribute**: (`dataTestID`: `string`, `attributeName`: `string`, `index?`: `number`) =&gt; `Chainable`&lt;`undefined` \\| `string`\\&gt;\n\n**`Example`**\n\n```ts\nthen(helper.get.elementsAttribute('avatar-picture', 'style')).shouldInclude('background-image: url(\"assets/avatar/def-user-male.png\")')\n</code></pre></p> <p>elementsComputedStyle: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>, <code>pseudoElement?</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>CSSStyleDeclaration</code>&gt;</p> <p>Returns element's computed style, including pseudo elements</p> <p><code>Example</code></p> <pre><code>helper.get.elementsComputedStyle('element-test-id', 0, ':before')\n</code></pre> <p>elementsProperty: (<code>dataTestID</code>: <code>string</code>, <code>propertyName</code>: keyof <code>JQuery</code>&lt;<code>HTMLElement</code>&gt;, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>any</code>&gt;</p> <p>Get element's property value</p> <p><code>Example</code></p> <pre><code>get.elementsProperty(\"image\", \"height\")\n</code></pre> <p>elementsStyleAttribute: (<code>dataTestID</code>: <code>string</code>, <code>attributeName</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>PlainObject</code>&lt;<code>string</code>&gt;&gt;</p> <p>Returns element's style attribute</p> <p><code>Example</code></p> <pre><code>get.elementsStyleAttribute(\"button-data-hook\", \"background-color\")\n</code></pre> <p>elementsText: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>string</code>&gt;</p> <p><code>Example</code></p> <pre><code>then(helper.get.elementsText(\"parent-job-name\", 3)).shouldInclude(\"Job 3 Name\")\n</code></pre> <p>env: (<code>key</code>: <code>string</code>) =&gt; <code>any</code></p> <p>Returns specific environment variable or undefined</p> <p><code>Example</code></p> <p>// Keeping password in cypress.config file <pre><code>e2e: {\n env: {\n   password: \"Changeme@1\",\n }\n}\n</code></pre> // using password during test <pre><code>helper.get.env(\"password\");\n</code></pre></p> <p>fixture: (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>any</code>&gt;</p> <p>Get fixture</p> <p><code>Example</code></p> <pre><code> given.fixture(\"user.json\", \"user\");\n then(\n   get.fixture(\"user\").shouldDeepNestedInclude({\n   name: \"Jane Doe\",\n   id: \"1234\",\n   nested: {\n    attr1: \"something\",\n    attr2: \"the other thing\"\n   }\n })\n);\n</code></pre> <p>focusedElement: () =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Get the element currently focused in the document.</p> <p>imageSnapshot: (<code>name</code>: <code>string</code>, <code>__namedParameters?</code>: <code>SnapshotOptions</code>) =&gt; <code>Chainable</code>&lt;<code>DiffSnapshotResult</code>&gt;</p> <p>Capture a snapshot and compare it to baseline snapshot Run Cypress with --env updateSnapshots=true in order to update the base image files for all of your tests.</p> <p><code>Example</code></p> <pre><code>// capture entire window\nget.imageSnapshot(\"homepage\");\n</code></pre> <p><code>Example</code></p> <pre><code>// capture an element by DataTestId, with threshold\nget.imageSnapshot(\"radio-group\", {\n dataTestID: \"radio-group\",\n failureThreshold: 0.2\n});\n</code></pre> <p>inputValue: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>string</code> | <code>number</code> | <code>string</code>[]&gt;</p> <p>Get value of input element</p> <p><code>Example</code></p> <pre><code>then(helper.get.inputValue('credentials-password')).shouldEqual(\"initial password\");\n</code></pre> <p>nthBySelector: (<code>selector</code>: <code>string</code>, <code>index?</code>: <code>number</code>, <code>attribute?</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Get A DOM element at a specific index from elements.</p> <p><code>Example</code></p> <p>// Get the 3rd checkbox <pre><code>helper.get.nthBySelector(\"checkbox\", 3, \"type\")\n</code></pre></p> <p>numberOfElements: (<code>dataTestID</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>number</code>&gt;</p> <p>Get number of elements with a specific dataTestID</p> <p><code>Example</code></p> <pre><code> then(helper.get.numberOfElements(\"migrated-vcenter\")).shouldEqual(2);\n</code></pre> <p>numberOfRequests: (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>number</code>&gt;</p> <p>Get number of outgoing request with a specific alias</p> <p><code>Example</code></p> <pre><code> then(helper.get.numberOfCalls(\"fetch-pokemon\")).shouldEqual(2);\n</code></pre> <p>requestBody: (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>any</code>&gt;</p> <p>Get intercepted request's body If a JSON Content-Type was used and the body was valid JSON, this will be an object. If the body was binary content, this will be a buffer.</p> <p>requestHeader: (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;{ <code>[key: string]</code>: <code>string</code> | <code>string</code>[];  }&gt;</p> <p>Get intercepted request's header</p> <p>requestQueryParams: (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;{ <code>[k: string]</code>: <code>string</code>;  }&gt;</p> <p>Get intercepted request's query param</p> <p>requestUrl: (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>string</code>&gt;</p> <p>Get intercepted request's url</p> <p>responseBody: (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>any</code>&gt;</p> <p>Get intercepted response's body If a JSON Content-Type was used and the body was valid JSON, this will be an object. If the body was binary content, this will be a buffer.</p> <p>responseHeader: (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;{ <code>[key: string]</code>: <code>string</code> | <code>string</code>[];  }&gt;</p> <p>Get intercepted response's header</p> <p>spy: (<code>name</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Get spy by alias</p> <p>spyFromFunction: (<code>func</code>: <code>Function</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Get spy by function name alias</p> <p>stub: (<code>name</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Get stub by alias</p> <p>window: () =&gt; <code>Chainable</code>&lt;<code>AUTWindow</code>&gt;</p> <p>Get the window object of the page that is currently active.</p> <p><code>Example</code></p> <pre><code>helper.get.window().then((win) =&gt; { win.localStorage.getItem(\"key\")}\n</code></pre>"},{"location":"classes/CypressHelper.html#given","title":"given","text":"<p>\u2022 given: <code>Object</code></p> <p>The given property will hold methods which will allow us to set pre-conditions before something takes place. This is a classic place to have methods which will set the inputs which are going to be passed down to our component.</p>"},{"location":"classes/CypressHelper.html#type-declaration_1","title":"Type declaration","text":"Name Type <code>env</code> (<code>key</code>: <code>string</code>, <code>value</code>: <code>any</code>) =&gt; <code>void</code> <code>fixture</code> (<code>filename</code>: <code>string</code>, <code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>any</code>&gt; <code>intercept</code> (<code>url</code>: <code>StringMatcher</code>, <code>alias</code>: <code>string</code>, <code>method?</code>: <code>string</code>) =&gt; <code>void</code> <code>interceptAndMockResponse</code> (<code>options</code>: { <code>alias?</code>: <code>string</code> ; <code>method?</code>: <code>string</code> ; <code>response?</code>: <code>Object</code> ; <code>url</code>: <code>StringMatcher</code>  }) =&gt; <code>void</code> <code>spy</code> (<code>name</code>: <code>string</code>) =&gt; <code>Omit</code>&lt;<code>SinonSpy</code>&lt;<code>any</code>[], <code>any</code>&gt;, <code>\"withArgs\"</code>&gt; &amp; <code>SinonSpyAgent</code>&lt;<code>SinonSpy</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; &amp; <code>SinonSpy</code>&lt;<code>any</code>[], <code>any</code>&gt; <code>spyOnObject</code> (<code>obj</code>: <code>T</code>, <code>method</code>: keyof <code>T</code>) =&gt; <code>Omit</code>&lt;<code>SinonSpy</code>&lt;<code>any</code>[], <code>any</code>&gt;, <code>\"withArgs\"</code>&gt; &amp; <code>SinonSpyAgent</code>&lt;<code>SinonSpy</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; &amp; <code>SinonSpy</code>&lt;<code>any</code>[], <code>any</code>&gt; <code>stub</code> (<code>alias?</code>: <code>string</code>) =&gt; <code>Agent</code>&lt;<code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; <code>stubObjectMethod</code> (<code>obj</code>: <code>T</code>, <code>method</code>: keyof <code>T</code>) =&gt; <code>Omit</code>&lt;<code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;, <code>\"withArgs\"</code>&gt; &amp; <code>SinonSpyAgent</code>&lt;<code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; &amp; <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; <code>stubbedInstance</code> (<code>constructor</code>: (...<code>args</code>: <code>any</code>[]) =&gt; <code>T</code>, <code>overrides</code>: <code>Partial</code>&lt;<code>T</code>&gt;) =&gt; <code>StubbedInstance</code>&lt;<code>T</code>, <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; &amp; <code>T</code> <code>stubbedInterface</code> &lt;T&gt;(<code>interfaceName</code>: <code>string</code>, <code>overrides</code>: <code>Partial</code>&lt;<code>T</code>&gt;) =&gt; <code>StubbedInstance</code>&lt;<code>T</code>, <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; &amp; <code>T</code> <p>env: (<code>key</code>: <code>string</code>, <code>value</code>: <code>any</code>) =&gt; <code>void</code></p> <p>Sets specific environment variable's value</p> <p><code>Example</code></p> <p>// Changing an environment variable      * ```ts helper.given.env(\"password\", \"changeMe@1\"); <pre><code>-----\n\n**fixture**: (`filename`: `string`, `alias`: `string`) =&gt; `Chainable`&lt;`any`\\&gt;\n\nLoad a fixture\n\n**`Example`**\n\n```ts\nlet { given, when, get } = new CypressHelper();\nit(\"should get fixture\", () =&gt; {\n given.fixture(\"user.json\", \"user\");\n then(get.fixture(\"user\")).shouldDeepNestedInclude({\n   name: \"Jane Doe\",\n   id: \"1234\",\n   nested: {\n     attr1: \"something\",\n     attr2: \"the other thing\"\n   }\n });\n});\n</code></pre></p> <p>intercept: (<code>url</code>: <code>StringMatcher</code>, <code>alias</code>: <code>string</code>, <code>method?</code>: <code>string</code>) =&gt; <code>void</code></p> <p>Use intercept() to intercept HTTP requests and responses</p> <p><code>Example</code></p> <pre><code>helper.given.intercept(\"/streets/sprite.png\", \"streetSprite\");\n</code></pre> <p>interceptAndMockResponse: (<code>options</code>: { <code>alias?</code>: <code>string</code> ; <code>method?</code>: <code>string</code> ; <code>response?</code>: <code>Object</code> ; <code>url</code>: <code>StringMatcher</code>  }) =&gt; <code>void</code></p> <p>Use interceptAndMockResponse to stub and intercept HTTP requests and responses.</p> <p><code>Example</code></p> <pre><code>// adds token to response header\nhelper.given.interceptAndMockResponse({\n  url: '** /sysmgmt/2015/bmc/session',\n  response: {\n    headers:{\n       'XSRF-Token': 'token',\n    },\n  },\n  alias: 'login'\n})\n</code></pre> <p><code>Example</code></p> <pre><code>// mocks response to login request\nhelper.given.interceptAndMockResponse({\n  method: \"POST\",\n  url: \"** /login\",\n  alias: \"login\",\n  response : {\n    token: 'token'\n  }\n})\n</code></pre> <p><code>Example</code></p> <pre><code>// mocks network error\nhelper.given.interceptAndMockResponse({\n  method: \"POST\",\n  url: \"** /avamars\",\n  alias: \"avamar\",\n  response : {\n    forceNetworkError: true\n  }\n})\n</code></pre> <p><code>Example</code></p> <pre><code>// mocks missing image\nhelper.given.interceptAndMockResponse({\n  method: \"POST\",\n  url: \"** /image.png\",\n  alias: \"image\",\n  response: { statusCode: 404 }\n})\n</code></pre> <p><code>Example</code></p> <pre><code>// using a fixture\n helper.given.interceptAndMockResponse({\n  url: \"** /shellygo/whatever**\",\n  response: { fixture: \"user.json\" },\n  alias: \"whatever\"\n});\n</code></pre> <p>spy: (<code>name</code>: <code>string</code>) =&gt; <code>Omit</code>&lt;<code>SinonSpy</code>&lt;<code>any</code>[], <code>any</code>&gt;, <code>\"withArgs\"</code>&gt; &amp; <code>SinonSpyAgent</code>&lt;<code>SinonSpy</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; &amp; <code>SinonSpy</code>&lt;<code>any</code>[], <code>any</code>&gt;</p> <p>Returns a new spy function, and creates an alias for the newly created spy</p> <p>spyOnObject: (<code>obj</code>: <code>T</code>, <code>method</code>: keyof <code>T</code>) =&gt; <code>Omit</code>&lt;<code>SinonSpy</code>&lt;<code>any</code>[], <code>any</code>&gt;, <code>\"withArgs\"</code>&gt; &amp; <code>SinonSpyAgent</code>&lt;<code>SinonSpy</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; &amp; <code>SinonSpy</code>&lt;<code>any</code>[], <code>any</code>&gt; <p>Spy on a method and create an alias for the spy</p> <p><code>Example</code></p> <pre><code>given.spyOnObject(window, \"alert\");\nalert(\"whatever\");\nthen(helper.get.spyFromFunction(window.alert)).shouldHaveBeenCalledWith(\"whatever\");\n// Or\nthen(helper.get.spy(\"alert\")).shouldHaveBeenCalledTimes(1);\n</code></pre> <p><code>Example</code></p> <pre><code>given.spyOnObject(serviceMock, \"functionName\");\nserviceMock.functionName();\nthen(helper.get.spyFromFunction(serviceMock.functionName)).shouldHaveBeenCalledTimes(1);\n</code></pre> <p>stub: (<code>alias?</code>: <code>string</code>) =&gt; <code>Agent</code>&lt;<code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt;</p> <p>Replace a function, record its usage and control its behavior.</p> <p><code>Example</code></p> <pre><code>given.stub(\"alias\");\nthen(get.spy(\"alias\")).shouldHaveBeenCalled();\n</code></pre> <p>stubObjectMethod: (<code>obj</code>: <code>T</code>, <code>method</code>: keyof <code>T</code>) =&gt; <code>Omit</code>&lt;<code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;, <code>\"withArgs\"</code>&gt; &amp; <code>SinonSpyAgent</code>&lt;<code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; &amp; <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt; <p>Stub an object's method and create an alias for the stub</p> <p><code>Example</code></p> <pre><code>//stubbing a service method\n helper.given.stubObjectMethod(serviceMock, \"functionName\").returns(3);\n\n//stubbing setters and getters\n helper.given.stubObjectMethod(serviceMock, \"count\").get(() =&gt; 3).set(() =&gt; {});\n</code></pre> <p>stubbedInstance: (<code>constructor</code>: (...<code>args</code>: <code>any</code>[]) =&gt; <code>T</code>, <code>overrides</code>: <code>Partial</code>&lt;<code>T</code>&gt;) =&gt; <code>StubbedInstance</code>&lt;<code>T</code>, <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; &amp; <code>T</code> <p>Creates a new object with the given functions as the prototype and stubs all implemented functions.</p> <p><code>Example</code></p> <pre><code>const serviceMock = helper.given.stubbedInstance(Service);\n</code></pre> <p><code>Example</code></p> <pre><code>class Service {\n public func1() {...}\n public get prop1() {...}\n}\nconst serviceMock = helper.given.stubbedInstance(Service, {prop1: 3});\n</code></pre> <p><code>Example</code></p> <pre><code>helper.given.stubbedInstance(Router, { events: new Observable() })\n</code></pre> <p><code>Example</code></p> <pre><code>helper.given.stubbedInstance(\n PokemonService,\n {\n   pokemonTypes: new BehaviorSubject&lt;NamedAPIResource[]&gt;([]),\n   pokemons: new BehaviorSubject&lt;BetterPokemon[]&gt;([]),\n }\n)\n</code></pre> <p>stubbedInterface: &lt;T&gt;(<code>interfaceName</code>: <code>string</code>, <code>overrides</code>: <code>Partial</code>&lt;<code>T</code>&gt;) =&gt; <code>StubbedInstance</code>&lt;<code>T</code>, <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; &amp; <code>T</code></p> <p>Creates a new object with the given functions as the prototype and stubs all functions.</p> <p><code>Example</code></p> <pre><code>const serviceMock = helper.given.stubbedInterface&lt;IService&gt;(\"IService\");\n</code></pre> <p><code>Example</code></p> <pre><code>interface IService {\n propertyFunc: (int: number) =&gt; number\n get prop1() : number\n}\nconst serviceMock = helper.given.stubbedInterface&lt;IService&gt;(\"IService\", {prop1: 3});\n</code></pre>"},{"location":"classes/CypressHelper.html#when","title":"when","text":"<p>\u2022 when: <code>Object</code></p> <p>The when property will hold methods of \u201cevents\u201d which will take place like render, click, hover, etc.</p>"},{"location":"classes/CypressHelper.html#type-declaration_2","title":"Type declaration","text":"Name Type <code>acceptConfirm</code> () =&gt; <code>EventEmitter2</code> | <code>Listener</code> <code>blur</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>cancelConfirm</code> () =&gt; <code>Cypress</code> <code>cancelPrompt</code> () =&gt; <code>EventEmitter2</code> | <code>Listener</code> <code>check</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>clear</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>click</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>clock</code> () =&gt; <code>Chainable</code>&lt;<code>Clock</code>&gt; <code>closeAlert</code> () =&gt; <code>Cypress</code> <code>dblclick</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>doWithin</code> (<code>fn</code>: () =&gt; <code>void</code>, <code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>dragAndDrop</code> (<code>element</code>: <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;, <code>targetElement</code>: <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;) =&gt; <code>void</code> <code>focus</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>hover</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>realClick</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>realType</code> (<code>dataTestID</code>: <code>string</code>, <code>keys</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>void</code>&gt; <code>rightclick</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>scrollToBottom</code> () =&gt; <code>Chainable</code>&lt;<code>undefined</code>&gt; <code>scrollToTop</code> () =&gt; <code>Chainable</code>&lt;<code>undefined</code>&gt; <code>selectOption</code> (<code>dataTestID</code>: <code>string</code>, <code>option</code>: <code>string</code> | <code>number</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>tick</code> (<code>ms</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>Clock</code>&gt; <code>toggle</code> (<code>index</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>toggleRadioBySelector</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>type</code> (<code>dataTestID</code>: <code>string</code>, <code>keys</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>typeSpecialCharacter</code> (<code>dataTestID</code>: <code>string</code>, <code>keys</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>uncheck</code> (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>visit</code> (<code>url</code>: <code>string</code>) =&gt; <code>void</code> <code>wait</code> (<code>ms</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>undefined</code>&gt; <code>waitForLastCall</code> (<code>alias</code>: <code>string</code>, <code>timeout</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>undefined</code> | <code>Interception</code>&lt;<code>any</code>, <code>any</code>&gt;&gt; <code>waitForResponse</code> (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>Interception</code>&lt;<code>any</code>, <code>any</code>&gt;&gt; <code>waitForResponses</code> (<code>alias</code>: <code>string</code>, <code>responses</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>Interception</code>&lt;<code>any</code>, <code>any</code>&gt;[]&gt; <code>waitUntil</code> (<code>checkFunction</code>: () =&gt; <code>Chainable</code>&lt;<code>any</code>&gt; | <code>ReturnType</code> | <code>PromiseLike</code>&lt;<code>ReturnType</code>&gt;, <code>options?</code>: <code>WaitUntilOptions</code>&lt;<code>any</code>&gt;) =&gt; <code>Chainable</code>&lt;<code>any</code>&gt; <code>within</code> (<code>fn</code>: () =&gt; <code>void</code>, <code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <p>acceptConfirm: () =&gt; <code>EventEmitter2</code> | <code>Listener</code></p> <p>Fires when your app calls the global window.confirm() method. The confirmation will be accepted.</p> <p>blur: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Blur a focused element. This element must currently be in focus. If you want to ensure an element is focused before blurring, try using helper.when.focus() before helper.when.blur().</p> <p>cancelConfirm: () =&gt; <code>Cypress</code></p> <p>Fires when your app calls the global window.confirm() method. The confirmation will be canceled.</p> <p>cancelPrompt: () =&gt; <code>EventEmitter2</code> | <code>Listener</code></p> <p>Fires when your app calls the global window.prompt() method. The prompt will be cancelled.</p> <p>check: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Check checkbox(es) or radio(s). This element must be an html input element with type checkbox or radio.</p> <p>clear: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Clear the value of an input or textarea</p> <p>click: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Click a DOM element.</p> <p><code>Example</code></p> <pre><code>&lt;button data-cy=\"move-right\"&gt;Move&lt;/button&gt;\nhelper.when.click('move-right')\n</code></pre> <p>clock: () =&gt; <code>Chainable</code>&lt;<code>Clock</code>&gt;</p> <p>overrides native global functions related to time allowing them to be controlled synchronously via helper.when.tick() This includes controlling:    setTimeout    clearTimeout    setInterval    clearInterval    Date Objects The clock starts at the unix epoch (timestamp of 0). This means that when you instantiate new Date in your application, it will have a time of January 1st, 1970.</p> <p>closeAlert: () =&gt; <code>Cypress</code></p> <p>Fires when your app calls the global window.alert() method. The alert will be closed.</p> <p>dblclick: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Double-click a DOM element.</p> <p>doWithin: (<code>fn</code>: () =&gt; <code>void</code>, <code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Scopes the execution of a function within an element</p> <p><code>Example</code></p> <pre><code>helper.when.doWithin(() =&gt; when.click('button-test-id'), 'button-row', 2)\n</code></pre> <p>dragAndDrop: (<code>element</code>: <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;, <code>targetElement</code>: <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;) =&gt; <code>void</code></p> <p>Drag an element and drop it in target element</p> <p><code>Example</code></p> <pre><code>helper.when.dragAndDrop(\n  helper.get.elementByTestId('selected-item', 2),\n  helper.get.elementByTestId('available-items')\n)\n</code></pre> <p>focus: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Focus on a DOM element.</p> <p><code>Example</code></p> <pre><code>helper.when.focus('credentials-password')\n</code></pre> <p>hover: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Fires native hover event. Yes, it can test :hover preprocessor.</p> <p><code>Example</code></p> <pre><code>helper.when.hover('consent-terms-agree')\n</code></pre> <p>realClick: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Fires native system click event.</p> <p><code>Example</code></p> <pre><code>&lt;button data-cy=\"move-right\"&gt;Move&lt;/button&gt;\nhelper.when.realClick('move-right')\n</code></pre> <p>realType: (<code>dataTestID</code>: <code>string</code>, <code>keys</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>void</code>&gt;</p> <p>Runs a sequence of native press event (via cy.press) Type event is global. Make sure that it is not attached to any field.</p> <p>rightclick: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Right click a DOM element.</p> <p>scrollToBottom: () =&gt; <code>Chainable</code>&lt;<code>undefined</code>&gt;</p> <p>Scroll to the bottom.</p> <p>scrollToTop: () =&gt; <code>Chainable</code>&lt;<code>undefined</code>&gt;</p> <p>Scroll to the top.</p> <p>selectOption: (<code>dataTestID</code>: <code>string</code>, <code>option</code>: <code>string</code> | <code>number</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Select an option with specific text, value, or index within a select html element.</p> <p><code>Example</code></p> <p><pre><code>&lt;select data-hook=\"fruit-selection\"&gt;\n  &lt;option value=\"456\"&gt;apples&lt;/option&gt;\n  &lt;option value=\"457\"&gt;oranges&lt;/option&gt;\n  &lt;option value=\"458\"&gt;bananas&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <pre><code>helper.when.selectOption('fruit-selection', 0).should('have.value', '456')\nhelper.when.selectOption('fruit-selection', 'oranges').should('have.value', '457')\nhelper.when.selectOption('fruit-selection', 458).should('have.value', '458')\n</code></pre></p> <p>tick: (<code>ms</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>Clock</code>&gt;</p> <p>Move time after overriding a native time function with helper.when.clock(). helper.when.clock() must be called before helper.when.tick()</p> <p><code>Example</code></p> <pre><code>helper.when.clock();\nhelper.when.click('login-button');\nhelper.when.tick(2000);\n</code></pre> <p>toggle: (<code>index</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Check radio(s). This element must be an html input element with type radio.</p> <p>toggleRadioBySelector: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Toggle radio(s) by dataTestID This element must be an html input element with type radio.</p> <p>type: (<code>dataTestID</code>: <code>string</code>, <code>keys</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Type into a DOM element, not including special characters</p> <p><code>Example</code></p> <pre><code>helper.when.type('credentials-password', 'new password')\n</code></pre> <p>typeSpecialCharacter: (<code>dataTestID</code>: <code>string</code>, <code>keys</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Type into a DOM element, including special characters</p> <p><code>Example</code></p> <pre><code>helper.when.typeSpecialChar('credentials-password', '{backspace}')\n</code></pre> <p>uncheck: (<code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Uncheck checkbox(es).</p> <p>visit: (<code>url</code>: <code>string</code>) =&gt; <code>void</code></p> <p>Visit a given url</p> <p>wait: (<code>ms</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>undefined</code>&gt;</p> <p>Wait for a number of milliseconds.</p> <p>waitForLastCall: (<code>alias</code>: <code>string</code>, <code>timeout</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>undefined</code> | <code>Interception</code>&lt;<code>any</code>, <code>any</code>&gt;&gt;</p> <p>Wait for a last request to complete.</p> <p>waitForResponse: (<code>alias</code>: <code>string</code>) =&gt; <code>Chainable</code>&lt;<code>Interception</code>&lt;<code>any</code>, <code>any</code>&gt;&gt;</p> <p>Wait for a specific request to complete.</p> <p>waitForResponses: (<code>alias</code>: <code>string</code>, <code>responses</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>Interception</code>&lt;<code>any</code>, <code>any</code>&gt;[]&gt;</p> <p>Wait for multiples requests to complete.</p> <p>waitUntil: (<code>checkFunction</code>: () =&gt; <code>Chainable</code>&lt;<code>any</code>&gt; | <code>ReturnType</code> | <code>PromiseLike</code>&lt;<code>ReturnType</code>&gt;, <code>options?</code>: <code>WaitUntilOptions</code>&lt;<code>any</code>&gt;) =&gt; <code>Chainable</code>&lt;<code>any</code>&gt; <p>Wait for something to happen in the DOM. Note! you should not have any asserts in the callback function. From cypress-wait-until documentation:    you cannot put assertions inside checkFunction. There is no way to avoid a test failure if an assertion throws an error.    You must manually check what the assertions would check for you.    The most common case is checking that an element exists or not</p> <p><code>Example</code></p> <pre><code>helper.when.waitUntil(() =&gt;\n  helper.get.elementByTestId('element-test-id', index)\n);\n</code></pre> <p>within: (<code>fn</code>: () =&gt; <code>void</code>, <code>dataTestID</code>: <code>string</code>, <code>index?</code>: <code>number</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Scopes the execution of a function within an element</p> <p><code>Example</code></p> <pre><code>helper.when.within(() =&gt; when.click('button-test-id'), 'button-row', 2)\n</code></pre> <p><code>Deprecated</code></p> <p>The method should not be used anymore. Use helper.when.doWithin instead.</p>"},{"location":"classes/CypressHelper.html#methods_1","title":"Methods","text":""},{"location":"classes/CypressHelper.html#beforeandafter","title":"beforeAndAfter","text":"<p>\u25b8 beforeAndAfter(): <code>void</code></p>"},{"location":"classes/CypressHelper.html#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"classes/CypressHelperOptions.html","title":"CypressHelperOptions","text":"<p>@shellygo/cypress-test-utils - v4.1.9 / Modules / CypressHelperOptions</p>"},{"location":"classes/CypressHelperOptions.html#class-cypresshelperoptions","title":"Class: CypressHelperOptions","text":""},{"location":"classes/CypressHelperOptions.html#table-of-contents","title":"Table of contents","text":""},{"location":"classes/CypressHelperOptions.html#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"classes/CypressHelperOptions.html#properties","title":"Properties","text":"<ul> <li>defaultDataAttribute</li> <li>handleSlotShadowDOM</li> <li>injectA11yChecker</li> <li>shadowSlotSuffix</li> <li>waitForElementsToLoad</li> </ul>"},{"location":"classes/CypressHelperOptions.html#constructors_1","title":"Constructors","text":""},{"location":"classes/CypressHelperOptions.html#constructor","title":"constructor","text":"<p>\u2022 new CypressHelperOptions()</p>"},{"location":"classes/CypressHelperOptions.html#properties_1","title":"Properties","text":""},{"location":"classes/CypressHelperOptions.html#defaultdataattribute","title":"defaultDataAttribute","text":"<p>\u2022 <code>Optional</code> defaultDataAttribute: <code>string</code> = <code>\"data-cy\"</code></p> <p>default data attribute for elements selection</p>"},{"location":"classes/CypressHelperOptions.html#handleslotshadowdom","title":"handleSlotShadowDOM","text":"<p>\u2022 <code>Optional</code> handleSlotShadowDOM: <code>boolean</code> = <code>true</code></p> <p>when set to true, cypress helper will automatically find the assigned dom element of elements with dataTestID with <code>defaultShadowSlotSuffix</code> suffix</p>"},{"location":"classes/CypressHelperOptions.html#injecta11ychecker","title":"injectA11yChecker","text":"<p>\u2022 <code>Optional</code> injectA11yChecker: <code>boolean</code> = <code>true</code></p> <p>when set to true, injects Axe (A11y test tool) before all tests</p>"},{"location":"classes/CypressHelperOptions.html#shadowslotsuffix","title":"shadowSlotSuffix","text":"<p>\u2022 <code>Optional</code> shadowSlotSuffix: <code>string</code> = <code>\"slot\"</code></p> <p>slot dataTestID suffix (only relevant when handleSlotShadowDOM  is set to true)</p>"},{"location":"classes/CypressHelperOptions.html#waitforelementstoload","title":"waitForElementsToLoad","text":"<p>\u2022 <code>Optional</code> waitForElementsToLoad: <code>boolean</code> = <code>true</code></p> <p>when set to true, waits until elements are loaded before returning them</p>"},{"location":"classes/CypressLitComponentHelper.html","title":"CypressLitComponentHelper","text":"<p>@shellygo/cypress-test-utils - v4.1.9 / Modules / CypressLitComponentHelper</p>"},{"location":"classes/CypressLitComponentHelper.html#class-cypresslitcomponenthelper","title":"Class: CypressLitComponentHelper","text":"<p><code>Classdes</code></p> <p>CypressLitComponentHelper exposes the following public properties:</p>"},{"location":"classes/CypressLitComponentHelper.html#table-of-contents","title":"Table of contents","text":""},{"location":"classes/CypressLitComponentHelper.html#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"classes/CypressLitComponentHelper.html#properties","title":"Properties","text":"<ul> <li>get</li> <li>given</li> <li>when</li> </ul>"},{"location":"classes/CypressLitComponentHelper.html#constructors_1","title":"Constructors","text":""},{"location":"classes/CypressLitComponentHelper.html#constructor","title":"constructor","text":"<p>\u2022 new CypressLitComponentHelper()</p>"},{"location":"classes/CypressLitComponentHelper.html#properties_1","title":"Properties","text":""},{"location":"classes/CypressLitComponentHelper.html#get","title":"get","text":"<p>\u2022 get: <code>Object</code> = <code>{}</code></p>"},{"location":"classes/CypressLitComponentHelper.html#given","title":"given","text":"<p>\u2022 given: <code>Object</code> = <code>{}</code></p>"},{"location":"classes/CypressLitComponentHelper.html#when","title":"when","text":"<p>\u2022 when: <code>Object</code></p> <p>enables mounting of a li component</p>"},{"location":"classes/CypressLitComponentHelper.html#type-declaration","title":"Type declaration","text":"Name Type <code>mount</code> &lt;T&gt;(<code>template</code>: <code>TemplateResult</code>&lt;<code>ResultType</code>&gt;, <code>constructor?</code>: (...<code>args</code>: <code>any</code>[]) =&gt; <code>T</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <code>unmount</code> () =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt; <p>mount: &lt;T&gt;(<code>template</code>: <code>TemplateResult</code>&lt;<code>ResultType</code>&gt;, <code>constructor?</code>: (...<code>args</code>: <code>any</code>[]) =&gt; <code>T</code>) =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>Mount a LitElement web component</p> <p><code>Example</code></p> <pre><code>litComponentHelper.when.mount&lt;SpinnerElement&gt;(\n  html`&lt;edf-spinner size=\"${this.props.size}\" type=\"${this.props.type}\" label=\"${this.props.label}\"&gt;&lt;/edf-spinner&gt;`\n  SpinnerElement,\n);\n</code></pre> <p>unmount: () =&gt; <code>Chainable</code>&lt;<code>JQuery</code>&lt;<code>HTMLElement</code>&gt;&gt;</p> <p>-</p>"},{"location":"classes/CypressReactComponentHelper.html","title":"CypressReactComponentHelper","text":"<p>@shellygo/cypress-test-utils - v4.1.9 / Modules / CypressReactComponentHelper</p>"},{"location":"classes/CypressReactComponentHelper.html#class-cypressreactcomponenthelper","title":"Class: CypressReactComponentHelper","text":"<p><code>Classdes</code></p> <p>CypressReactComponentHelper exposes the following public properties:</p>"},{"location":"classes/CypressReactComponentHelper.html#table-of-contents","title":"Table of contents","text":""},{"location":"classes/CypressReactComponentHelper.html#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"classes/CypressReactComponentHelper.html#properties","title":"Properties","text":"<ul> <li>get</li> <li>when</li> </ul>"},{"location":"classes/CypressReactComponentHelper.html#constructors_1","title":"Constructors","text":""},{"location":"classes/CypressReactComponentHelper.html#constructor","title":"constructor","text":"<p>\u2022 new CypressReactComponentHelper()</p>"},{"location":"classes/CypressReactComponentHelper.html#properties_1","title":"Properties","text":""},{"location":"classes/CypressReactComponentHelper.html#get","title":"get","text":"<p>\u2022 get: <code>Object</code></p> <p>enables getting the mounted component</p>"},{"location":"classes/CypressReactComponentHelper.html#type-declaration","title":"Type declaration","text":"Name Type <code>component</code> () =&gt; <code>ReactNode</code> <p>component: () =&gt; <code>ReactNode</code></p> <p>Get mounted component</p>"},{"location":"classes/CypressReactComponentHelper.html#when","title":"when","text":"<p>\u2022 when: <code>Object</code></p> <p>enables mounting of a React component</p>"},{"location":"classes/CypressReactComponentHelper.html#type-declaration_1","title":"Type declaration","text":"Name Type <code>mount</code> (<code>type</code>: <code>string</code> \\| <code>T</code>, <code>props?</code>: <code>null</code> \\| <code>Attributes</code> &amp; <code>P</code>, ...<code>children</code>: <code>ReactNode</code>[]) =&gt; <code>void</code> <code>mountComponent</code> (<code>component</code>: <code>ReactNode</code>) =&gt; <code>void</code> <p>mount: (<code>type</code>: <code>string</code> \\| <code>T</code>, <code>props?</code>: <code>null</code> \\| <code>Attributes</code> &amp; <code>P</code>, ...<code>children</code>: <code>ReactNode</code>[]) =&gt; <code>void</code> <p>Mount a react component</p> <p><code>Example</code></p> <pre><code>reactComponentHelper.when.mount(typeof MyComponent, { prop1: \"value1\" }, &lt;MyChildComponent /&gt;);\n</code></pre> <p>mountComponent: (<code>component</code>: <code>ReactNode</code>) =&gt; <code>void</code></p> <p>Mount a react component</p> <p><code>Example</code></p> <pre><code> reactComponentHelper.when.mountComponent(&lt;MyComponent /&gt;);\n</code></pre>"}]}